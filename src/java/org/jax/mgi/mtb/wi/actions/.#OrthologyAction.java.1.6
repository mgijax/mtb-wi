package org.jax.mgi.mtb.wi.actions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jax.mgi.mtb.dao.custom.mtb.MTBGeneticsUtilDAO;
import org.jax.mgi.mtb.dao.custom.mtb.MTBOrthologyComparator;
import org.jax.mgi.mtb.dao.custom.mtb.MTBOrthologyDTO;
import org.jax.mgi.mtb.dao.custom.mtb.MTBSynchronizationUtilDAO;
import org.jax.mgi.mtb.utils.LabelValueDataBean;
import org.jax.mgi.mtb.wi.forms.OrthologyForm;

/**
 *  
 */
public class OrthologyAction extends Action {
  // --------------------------------------------------------- Public Methods
  /**
   * Queries MGI for Human Gene Symbol to Mouse Orthologies then uses the
   * Mouse gene symbols to query MTB for strain and tumor genetics records
   *  
   * @param mapping the action mapping that determines where we need to go
   * @param form the form bean
   * @param request standard servlet request
   * @param response standard servlet response
   * @return the ActionForward object that indicates where to go
   * @throws Exception if the application business logic throws an exception.
   * @see org.apache.struts.action.ActionMapping
   * @see org.apache.struts.action.ActionForm
   * @see javax.servlet.http.HttpServletRequest
   * @see javax.servlet.http.HttpServletResponse
   */
  public ActionForward execute(ActionMapping mapping,
          ActionForm form,
          HttpServletRequest request,
          HttpServletResponse response)
          throws Exception {

    OrthologyForm oForm = (OrthologyForm) form;
    String strTarget = null;
    String humanGeneSymbols = oForm.getHumanGS().toUpperCase();
    
    String sortOrder = oForm.getSortBy();

    // equals, begins, contains, ends
    String comparison = oForm.getCompare();
    String ref = request.getParameter("reference");
    if ((ref != null ) && (ref.length()>1)) {
      
      if("true".equals(request.getParameter("asList"))){
        ArrayList<LabelValueDataBean<String,String,String>> symbols = getSymbolArrayForRef(ref);
        request.setAttribute("symbols", symbols);
        request.setAttribute("reference", ref);
        
        return mapping.findForward("list");
      }else{
        
        humanGeneSymbols = getSymbolListForRef(ref);
      }
      

  }

    if((humanGeneSymbols != null) && (humanGeneSymbols.length()>0)){

      Collection <MTBOrthologyDTO> orthos = MTBSynchronizationUtilDAO.getInstance().getHMOrthologies(humanGeneSymbols,comparison);

      orthos = MTBGeneticsUtilDAO.getInstance().getOrthologGenetics(orthos);
      String sortBy ="";
      
      MTBOrthologyComparator compy = null;
      if ((sortOrder != null) && sortOrder.equals("HumanGS")) {
        compy = new MTBOrthologyComparator(MTBOrthologyComparator.HUMAN_GS);
        sortBy = "Human Gene Symbol";
      } else {
        compy = new MTBOrthologyComparator(MTBOrthologyComparator.MOUSE_GS);
        sortBy = "Mouse Gene Symbol";
      }

      MTBOrthologyDTO sortArray[] = (MTBOrthologyDTO[]) orthos.toArray(new MTBOrthologyDTO[orthos.size()]);
      Arrays.sort(sortArray, compy);

      orthos = new ArrayList<MTBOrthologyDTO>(Arrays.asList(sortArray));
      
      humanGeneSymbols = pretty(humanGeneSymbols,", ");

      request.setAttribute("orthos", orthos);
      request.setAttribute("humanGS", humanGeneSymbols);
      request.setAttribute("comparison", comparison);
      request.setAttribute("sortBy", sortBy);

      strTarget = "success";
    } else {
      strTarget = "orthologySearch";
    }
    return mapping.findForward(strTarget);
  }
  
  
  /**
   * Converts string of arbitrarily delimited symbols into delim delimited string
   * @param humanGeneSymbols a string of symbols with some type of delimiter
   * @param delim string new delimiter
   * @return a string of gene symbols delimited by the delim param
   */
  private String pretty(String humanGeneSymbols,String delim){
    
    StringBuffer buf = new StringBuffer();
    String[] mrks = humanGeneSymbols.split("[\t\n .,|:;]+");
    for(int i = 0; i < mrks.length; i++){
      if(i ==0){
        buf.append(mrks[i].trim());
      }else{
        buf.append(delim+mrks[i].trim());
      }
    }
    return buf.toString();
  }
  
  private HashMap<String,ArrayList<LabelValueDataBean<String,String,String>>> refGenes(){
    HashMap<String,ArrayList<LabelValueDataBean<String,String,String>>> map = new HashMap<String,ArrayList<LabelValueDataBean<String,String,String>>>();
    
    ArrayList refList = new ArrayList();
    
    refList.add(new LabelValueDataBean("TP53", "7157", "tumor protein p53"));
    refList.add(new LabelValueDataBean("KRAS", "3845", "v-Ki-ras2 Kirsten rat sacroma viral oncogene homolog"));
    refList.add(new LabelValueDataBean("STK11", "6794", "serine/threonine kinase 11"));
    refList.add(new LabelValueDataBean("EGFR", "1956", "epidermal growth factor receptor"));
    refList.add(new LabelValueDataBean("LRP1B", "53353", "low density lipoprotein-related protein 1B"));
    refList.add(new LabelValueDataBean("NF1", "4763", "neurofibromin 1"));
    refList.add(new LabelValueDataBean("ATM", "472", "ataxia telangiectasia mutated"));
    refList.add(new LabelValueDataBean("APC", "324", "adenomatous polyposis coli"));
    refList.add(new LabelValueDataBean("EPHA3", "2042", "EPH receptor A3"));
    refList.add(new LabelValueDataBean("PTPRD", "5789", "protein tyrosinephosphatase, receptor type, D"));
    refList.add(new LabelValueDataBean("CDKN2A", "1029", "cyclin-dependent kinase inhibitor 2A"));
    refList.add(new LabelValueDataBean("ERBB4", "2066", "v-erb-a erythroblastic leukemia viral oncogene homolog 4"));
    refList.add(new LabelValueDataBean("KDR", "3791", "kinase insert domain receptor"));
    refList.add(new LabelValueDataBean("FGFR4", "2264", "fibroblast growth factor receptor 4"));
    refList.add(new LabelValueDataBean("NTRK1", "4914", "neurotrophic tyrosine kinase, receptor, type 1"));
    refList.add(new LabelValueDataBean("RB1", "5924", "Ras protein-specific guanine neucleotide-releasing factor 2"));
    refList.add(new LabelValueDataBean("NTRK3", "4916", "neurotrophic tyrosine kinase, receptor, type 3"));
    refList.add(new LabelValueDataBean("EPHA5", "2044", "EPH receptor A5"));
    refList.add(new LabelValueDataBean("PDGFRA", "5156", "platelet-derived growth factor receptor, alpha polypeptide"));
    refList.add(new LabelValueDataBean("GNAS", "2778", "GNAS complex locus"));
    refList.add(new LabelValueDataBean("LTK", "4058", "leukocyte receptor tyrosine kinase"));
    refList.add(new LabelValueDataBean("INHBA", "3624", "inhibin,beta A"));
    refList.add(new LabelValueDataBean("PAK3", "5063", "p21 protein (Cdc42/Rac)-activated kinase 3"));
    refList.add(new LabelValueDataBean("ZMYND10", "51364", "zinc finger, MYND-type containing 10"));
    refList.add(new LabelValueDataBean("NRAS", "4893", "neuroblastoma RAS viral (v-ras) oncogene homolog"));
    refList.add(new LabelValueDataBean("SLC38A3", "10991", "solute carrier family 38, member 3")); 
    
    map.put("Ding", refList);
    return map;
  }
  
  private ArrayList<LabelValueDataBean<String,String,String>> getSymbolArrayForRef(String ref){
    return refGenes().get(ref);
  }
  
  private String getSymbolListForRef(String ref){
    StringBuffer str = new StringBuffer();
    ArrayList<LabelValueDataBean<String,String,String>> list = getSymbolArrayForRef(ref);
    for(LabelValueDataBean<String,String,String> lbv : list){
      str.append(lbv.getLabel()).append(",");
    }
    return str.toString();
  }
    
    
}

 